// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gfunc_cpp
double gfunc_cpp(const double& ga);
RcppExport SEXP _bqrgal_gfunc_cpp(SEXP gaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type ga(gaSEXP);
    rcpp_result_gen = Rcpp::wrap(gfunc_cpp(ga));
    return rcpp_result_gen;
END_RCPP
}
// dgal_cpp
arma::colvec dgal_cpp(const arma::colvec& y, const double& p0, const double& mu, const double& sigma, const double& ga, const bool& logd);
RcppExport SEXP _bqrgal_dgal_cpp(SEXP ySEXP, SEXP p0SEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP gaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type ga(gaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dgal_cpp(y, p0, mu, sigma, ga, logd));
    return rcpp_result_gen;
END_RCPP
}
// predBQRGAL_cpp
List predBQRGAL_cpp(const arma::mat& mu, const arma::colvec& ga, const arma::colvec& sigma, const arma::mat& ss, const arma::mat& vv, const arma::colvec& AA, const arma::colvec& BB, const arma::colvec& CC, const arma::colvec& probs, const bool err, const bool sam);
RcppExport SEXP _bqrgal_predBQRGAL_cpp(SEXP muSEXP, SEXP gaSEXP, SEXP sigmaSEXP, SEXP ssSEXP, SEXP vvSEXP, SEXP AASEXP, SEXP BBSEXP, SEXP CCSEXP, SEXP probsSEXP, SEXP errSEXP, SEXP samSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ga(gaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type vv(vvSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type AA(AASEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type BB(BBSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const bool >::type err(errSEXP);
    Rcpp::traits::input_parameter< const bool >::type sam(samSEXP);
    rcpp_result_gen = Rcpp::wrap(predBQRGAL_cpp(mu, ga, sigma, ss, vv, AA, BB, CC, probs, err, sam));
    return rcpp_result_gen;
END_RCPP
}
// predBQRAL_cpp
List predBQRAL_cpp(const arma::mat& mu, const arma::colvec& sigma, const arma::mat& vv, const double& AA, const double& BB, const arma::colvec& probs, const bool err, const bool sam);
RcppExport SEXP _bqrgal_predBQRAL_cpp(SEXP muSEXP, SEXP sigmaSEXP, SEXP vvSEXP, SEXP AASEXP, SEXP BBSEXP, SEXP probsSEXP, SEXP errSEXP, SEXP samSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type vv(vvSEXP);
    Rcpp::traits::input_parameter< const double& >::type AA(AASEXP);
    Rcpp::traits::input_parameter< const double& >::type BB(BBSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const bool >::type err(errSEXP);
    Rcpp::traits::input_parameter< const bool >::type sam(samSEXP);
    rcpp_result_gen = Rcpp::wrap(predBQRAL_cpp(mu, sigma, vv, AA, BB, probs, err, sam));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bqrgal_gfunc_cpp", (DL_FUNC) &_bqrgal_gfunc_cpp, 1},
    {"_bqrgal_dgal_cpp", (DL_FUNC) &_bqrgal_dgal_cpp, 6},
    {"_bqrgal_predBQRGAL_cpp", (DL_FUNC) &_bqrgal_predBQRGAL_cpp, 11},
    {"_bqrgal_predBQRAL_cpp", (DL_FUNC) &_bqrgal_predBQRAL_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_bqrgal(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
